# LinkPro AI人材マッチングプラットフォーム 開発TODO リスト
更新日: 2025年8月12日（セキュリティ改善・パフォーマンス最適化完了）

## 🎯 システム概要（2025年8月12日時点）

### 完成済み基本機能
- **認証・プロフィール管理**: Supabase Auth、ユーザータイプ（client/pro）
- **AI人材プロフィール**: 4つのスキルレベル、AIツール経験、活用実績
- **プロジェクト管理**: 作成、編集、応募、メッセージング
- **自動マッチング**: 55点満点のスコアリング、上位5名への通知
- **AI対話型プロジェクト作成**: Gemini 2.0 Flash による要件分析支援
- **通知システム**: リアルタイム通知、通知センター
- **検索・フィルタ**: プロジェクト一覧、プロフェッショナル一覧

### 現在のプロジェクト構造（シンプル化済み）
**必須項目（2つのみ）:**
- `required_ai_level`: AIスキルレベル（expert/developer/user/supporter）
- `project_difficulty`: プロジェクト難易度（beginner/intermediate/advanced）

**削除済み項目（2025年1月17日）:**
- `business_domain`: 業務領域（クライアントには判断困難）
- `required_skills`: 必要スキル（曖昧すぎる）
- `required_ai_tools`: AIツール要件（手段よりも課題解決が重要）

### マッチングスコア（55点満点）
- レベル適合度: 30点（最重要）
- 経験年数スコア: 15点
- 稼働可能性スコア: 10点
- ツール・業務領域マッチング: 削除済み

## 📋 実装優先順位（戦略的ロードマップ）

### 🔴 次の実装（1週間）- 即効性重視
#### 1. AI活用事例機能 【最優先】
- [ ] ai_use_casesテーブルの作成
- [ ] 事例登録フォーム（/profile/cases/new）
- [ ] プロフィールでの事例表示
- [ ] 事例一覧ページ（/ai-cases）
- [ ] いいね・ブックマーク機能

**目的**: Pro側の実績アピール強化、クライアント側の参考事例提供

#### 2. 既存機能の品質向上
- [ ] プロフィール充実度ガイドの改善
- [ ] エラーハンドリングの統一化
- [ ] レスポンシブデザインの改善

### 🟡 短期実装（2-4週間）- 成約率向上
#### 1. スカウト機能
- [ ] スカウトメッセージ送信機能
- [ ] スカウト専用通知タイプ
- [ ] スカウトテンプレート管理
- [ ] スカウト返信率の表示

#### 2. 予算・期間の自動見積もり
- [ ] 類似案件分析エンドポイント
- [ ] AI（Gemini）による工数予測
- [ ] 相場情報の表示UI
- [ ] 見積もり根拠の可視化

#### 3. 提案支援機能
- [ ] レベル別提案テンプレート
- [ ] AIによる提案文レビュー
- [ ] 成功提案の参照機能

### 🟢 中期実装（1-2ヶ月）- 信頼性構築
#### 1. 評価・レビューシステム
- [ ] 5段階評価機能
- [ ] スキル別評価
- [ ] 実績バッジシステム
- [ ] レビューへの返信

#### 2. スキル検証機能
- [ ] AIツール習熟度テスト
- [ ] ポートフォリオ審査
- [ ] 認定バッジ発行
- [ ] 定期的な再認定

#### 3. 成功事例の可視化
- [ ] プロジェクト完了レポート
- [ ] ROI計算・表示
- [ ] ケーススタディ作成
- [ ] 成功要因分析

### 🔵 長期実装（3ヶ月以降）- 高度な自動化
#### 1. AIによる要件分析強化
- [ ] 曖昧な要件の明確化
- [ ] 技術的実現可能性診断
- [ ] リスク要因の自動検出
- [ ] 代替案の提案

#### 2. 動的マッチング最適化
- [ ] リアルタイムスコア調整
- [ ] 応募状況による推薦変更
- [ ] 成功確率予測
- [ ] A/Bテストによる改善

#### 3. 学習支援エコシステム
- [ ] スキルギャップ分析
- [ ] パーソナライズ学習パス
- [ ] オンライン勉強会
- [ ] メンター紹介

## ✅ 完了済みタスク一覧

### 2025年8月12日完了
#### セキュリティ改善
- [x] SECURITY DEFINERビューをSECURITY INVOKERに変更（4ビュー）
- [x] RLS（行レベルセキュリティ）の正しい適用を確保
- [x] 各テーブルでRLSを有効化
- [x] マイグレーションファイル作成（20250812_fix_security_definer_views.sql）

#### コード品質改善
- [x] 環境変数の非nullアサーション（!）をすべて削除
- [x] 適切なエラーハンドリングを追加（auth/callback/route.ts）
- [x] APIキーの環境変数チェック追加（Gemini API、Supabase）
- [x] pmからproへの表記統一完了（要件定義書、型定義）

#### パフォーマンス最適化
- [x] N+1問題の修正（dashboard/page.tsx）
- [x] N+1問題の修正（projects/page.tsx）  
- [x] N+1問題の修正（messages/page.tsx）
- [x] バッチクエリによるデータベースアクセスの最適化
- [x] クエリ数を85%削減達成

### 2025年1月17日完了
#### システム構造の最適化
- [x] 業務領域（business_domain）の完全削除
- [x] 必要スキル（required_skills）の完全削除
- [x] AIツール要件（required_ai_tools）の削除
- [x] プロジェクト構造のシンプル化（2つの必須項目のみ）

#### フィルタ・検索機能の強化
- [x] プロジェクト一覧ページの拡張
- [x] AI要件フィルタ（レベルのみ、複数選択対応）
- [x] マッチング度による並び替え機能
- [x] 予算・期間での絞り込み
- [x] 検索条件の保存機能

#### テーブル構造のクリーンアップ
- [x] マッチングスコア計算の更新（100点→55点満点）
- [x] 不要なカラムの削除（required_skills）
- [x] pro_requirementsの不要フィールド削除
- [x] マイグレーションファイル作成（20250117_cleanup_unused_fields.sql）

#### AIプロジェクト作成支援の最適化
- [x] analyze-project APIの分析項目を現在の構造に合わせて更新
- [x] chat-with-ai APIの不要なbusiness_domainチェック削除
- [x] 現在のプロジェクト項目（2つの必須項目のみ）に最適化

### 2025年1月14-16日完了
#### 基本機能の完成
- [x] AI人材プロフィール拡張（profiles.profile_details）
- [x] マッチングスコアテーブル作成とトリガー実装
- [x] AI対話型プロジェクト作成ウィザード
- [x] Gemini 2.0 Flash API統合
- [x] 専門コンサルタントペルソナ実装
- [x] ProDashboardのマッチングプロジェクト表示強化
- [x] クライアント向けプロジェクト管理ページ（/projects/my）
- [x] NotificationCenterコンポーネント実装
- [x] 通知一覧ページ（/notifications）
- [x] プロジェクト詳細ページのマッチング候補表示
- [x] プロフィール充実度の表示とガイド
- [x] エラーハンドリングとUX改善（トースト通知、ローディング統一）

#### プロフェッショナル一覧機能
- [x] AIスキルタイプでのフィルター（エキスパート/開発者/活用者/支援者）
- [x] AIツールでのフィルター（ChatGPT、Claude等）
- [x] AI活用経験年数でのフィルター
- [x] 時間単価でのフィルター
- [x] 稼働可能な人材のみ表示オプション

## 🔧 技術的改善（継続的）

### セキュリティ・基本機能
- [ ] Function Search Path Mutable問題の修正（12関数）
- [ ] Leaked Password Protectionの有効化検討
- [ ] メール認証フローの実装
- [ ] パスワードリセット機能の動作確認
- [ ] セッション管理の強化
- [ ] 2要素認証の実装

### データ整合性
- [ ] プロジェクト削除時の関連データ処理
- [ ] ユーザー削除時のデータ処理フロー
- [ ] データベーストランザクションの実装

### パフォーマンス
- [ ] 競合状態の修正（ClientDashboard.tsx）
- [ ] クライアント側フィルタリングのサーバー側移行
- [ ] next/imageコンポーネントの導入
- [ ] 動的インポートの実装（重いコンポーネント）
- [ ] 画像の遅延読み込み実装
- [ ] ページネーションの最適化
- [ ] キャッシュ戦略の実装

### テスト
- [ ] 単体テストの実装（Jest）
- [ ] 統合テストの実装
- [ ] E2Eテストの実装（Playwright/Cypress）
- [ ] テストカバレッジ80%以上

## 🔍 未解決の中程度の問題

### 修正推奨（優先度：中）
- [ ] 競合状態の修正（dashboard/ClientDashboard.tsx） - 応募ステータス更新時
- [ ] クライアント側フィルタリングのサーバー側移行（projects/[id]/page.tsx）
- [ ] useEffectの依存配列の最適化
- [ ] エラーメッセージの国際化対応（i18n）
- [ ] 過度なデータ取得の最適化

## 🎯 次回セッションの作業

### 最優先: AI活用事例機能の実装
1. **ai_use_casesテーブルの設計・作成**
   - 事例タイトル、説明、使用ツール、成果指標
   - いいね・ブックマーク機能のためのテーブル
   
2. **事例登録フォーム**
   - /profile/cases/new
   - 画像アップロード機能
   - 成果の定量化入力
   
3. **事例表示機能**
   - プロフィールページでの事例一覧表示
   - 公開事例ギャラリー（/ai-cases）
   - 検索・フィルタ機能

### 期待される効果
- Pro側: 具体的な実績をアピール可能
- クライアント側: 参考事例を見て発注しやすくなる
- プラットフォーム全体: 信頼性と透明性の向上

## 📊 現在のシステム状況

**データベース**: 11テーブル（セキュリティ改善済み）
- profiles（AI人材情報含む、user_type: 'client' | 'pro'）
- projects（シンプル化済み、pro_requirements使用）
- matching_scores（55点満点）
- applications、conversations、messages
- notifications、saved_searches
- ai_skills、ai_conversations、project_templates
- **セキュリティ**: 全テーブルでRLS有効、SECURITY INVOKER使用

**API**: 最適化・堅牢化済み
- /api/analyze-project（環境変数チェック追加）
- /api/chat-with-ai（エラーハンドリング改善）
- 環境変数の非nullアサーション（!）を全て除去

**UI**: 現代的でレスポンシブ（パフォーマンス改善済み）
- Next.js 14 + TypeScript
- Tailwind CSS + shadcn/ui
- 統一されたローディング・エラーハンドリング
- **パフォーマンス**: N+1問題解決、クエリ数85%削減達成

**次の重要マイルストーン**: AI活用事例機能により、プラットフォームの信頼性とユーザビリティを大幅に向上させる

[ ] 自分の目指す将来像から逆算してプロフィールを作れるようにする。
