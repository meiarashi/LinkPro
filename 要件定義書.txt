# クライアント・PMマッチングプラットフォーム 要件定義書
更新日: 2025年1月

## 1. プロジェクト概要

### 1.1 目的

クライアントとプロジェクトマネージャー（PM）をマッチングするプラットフォームを開発する。クライアントはプロジェクトを作成・公開し、PMはプロフィールを作成して応募するという基本機能を提供し、効率的かつ適切なマッチングを実現する。

### 1.2 プロジェクトの背景

プロジェクトマネージャーとクライアントのマッチングは従来、人的ネットワークや既存のフリーランスプラットフォームに依存していたが、プロジェクトマネジメント特化型のマッチングサービスは少ない。本プラットフォームは、PMの特性とクライアントの求める要件を適切にマッチングし、成功率の高いプロジェクト実施を支援する。

### 1.3 開発アプローチ

段階的な開発アプローチを採用し、以下のフェーズに分けて実装を進める：

1. MVP（最小機能版）：基本認証、プロフィール作成、プロジェクト作成、基本的なマッチング機能
2. 機能強化フェーズ：メッセージング機能、アカウント設定、UI/UX改善
3. 特徴的機能実装：AI審査、リファレンスチェック、有料プラン導入
4. 拡張機能：コミュニティ機能、チーム共有機能

## 2. システム要件

### 2.1 機能要件

### 2.1.1 実装済み機能

**認証系機能**
- ユーザー登録（メールアドレス、Googleアカウント）
- ユーザータイプ選択（クライアント/PM）
- ログイン/ログアウト
- サーバーサイド認証フロー（/auth/callback）
- パスワードリセット

**プロフィール管理**
- プロフィール作成/編集
- 基本情報（氏名、スキル、経歴）
- PM向け：単価・稼働情報設定
- プロフィール公開/非公開設定

**プロジェクト管理（クライアント向け）**
- プロジェクト作成/編集
- タイトル、説明、予算、期間設定
- 求めるスキル設定
- プロジェクトステータス管理（公開/非公開/完了/中止）
- プロジェクト一覧表示

**プロジェクト検索/応募（PM向け）**
- プロジェクト一覧表示
- 検索機能（キーワード、スキル）
- フィルター機能（予算範囲）
- プロジェクト詳細表示
- 応募機能（メッセージ付き）
- 応募状況確認

**メッセージング機能**
- メッセージ送受信
- 会話一覧表示（左右分割UI）
- 既読/未読管理
- 未読メッセージ数表示
- リアルタイム更新
- 応募承認後の双方向メッセージ

**ダッシュボード**
- クライアント：プロジェクト管理、応募確認
- PM：応募状況、プロフィール状態確認
- 新着メッセージ通知（バッジ表示）

**アカウント設定**
- メールアドレス変更
- パスワード変更
- 通知設定（メール通知のON/OFF）
- アカウント削除（ソフトデリート）

**統一ヘッダー**
- ロゴ、ナビゲーション
- ユーザー情報表示
- 未読メッセージ数のリアルタイム表示
- アカウント設定へのアクセス
- ログアウト機能

### 2.1.2 今後実装予定の機能

**高度な検索機能**
- より詳細な検索条件
- 保存した検索条件
- ソート機能の充実

**プロジェクト管理の改善**
- プロジェクトの一括操作
- テンプレート機能
- 下書き保存

**通知システム**
- プッシュ通知
- メール通知の詳細設定
- アプリ内通知センター

**評価・レビューシステム**
- プロジェクト完了後の相互評価
- 実績の表示
- 信頼性スコア

**AI機能（拡張フェーズ）**
- AIによる審査
- マッチングスコア算出
- レコメンド機能

**有料プラン（拡張フェーズ）**
- プラン種別設定
- Stripe連携による決済
- プラン別機能制限管理

**コミュニティ機能（拡張フェーズ）**
- 質問投稿/回答機能
- カテゴリ分類
- ありがとうバッジ機能

### 2.2 非機能要件

### 2.2.1 パフォーマンス要件

- ページ読み込み時間：3秒以内
- 同時接続ユーザー数：初期100名、将来的に1000名
- 検索結果表示：2秒以内
- リアルタイム更新：1秒以内

### 2.2.2 セキュリティ要件

- Supabase RLS（Row Level Security）による細かいアクセス制御
- パスワードの安全な保存（Supabase Auth）
- OAuth 2.0によるソーシャルログイン
- HTTPSによる通信の暗号化
- XSS、CSRF対策

### 2.2.3 可用性要件

- システム稼働率：99.5%以上
- バックアップ：日次自動バックアップ
- メンテナンス時間：事前告知による計画的実施

### 2.2.4 ユーザビリティ要件

- 直感的なUI/UX
- レスポンシブデザイン対応（PC/モバイル）
- アクセシビリティ配慮
- 日本語対応
- エラーメッセージの分かりやすさ

### 2.2.5 スケーラビリティ要件

- ユーザー数増加に対応可能な設計
- 機能拡張の容易性確保
- Supabaseの自動スケーリング活用

## 3. システム設計

### 3.1 技術スタック

**フロントエンド**
- Next.js 14 (App Router)
- TypeScript
- Tailwind CSS
- shadcn/ui コンポーネント

**バックエンド**
- Supabase (PostgreSQL)
- Supabase Auth
- Supabase Realtime
- Supabase Storage（今後実装）

**デプロイ・インフラ**
- Vercel（フロントエンド）
- GitHub（ソースコード管理）
- GitHub連携による自動デプロイ

### 3.2 実装済みデータベース構造

詳細は`database_schema.txt`を参照

**主要テーブル**
1. profiles - ユーザープロフィール情報
2. projects - プロジェクト情報
3. applications - 応募情報
4. messages - メッセージ
5. conversations - 会話管理

**主要機能**
- Row Level Security (RLS) による細かいアクセス制御
- リアルタイム更新のためのトリガー
- ソフトデリート（deleted_atフィールド）

### 3.3 画面構成

### 3.3.1 公開ページ
- ランディングページ（/）
- ログインページ（/login）
- 新規登録ページ（/signup）
- パスワードリセット（/reset-password）

### 3.3.2 認証後ページ

**共通**
- ダッシュボード（/dashboard）
- メッセージ（/messages）
- プロフィール編集（/profile/edit）
- アカウント設定（/settings）

**クライアント向け**
- プロジェクト作成（/projects/new）
- プロジェクト編集（/projects/[id]/edit）
- プロジェクト詳細（/projects/[id]）

**PM向け**
- プロジェクト一覧（/projects）
- プロジェクト詳細・応募（/projects/[id]）

### 3.4 主要なワークフロー

### 3.4.1 ユーザー登録フロー
1. メールアドレス/Googleアカウントで登録
2. ユーザータイプ選択（クライアント/PM）
3. プロフィール初期設定
4. ダッシュボードへ遷移

### 3.4.2 プロジェクト応募フロー
1. PMがプロジェクトを検索
2. プロジェクト詳細を確認
3. 応募メッセージを作成して送信
4. クライアントが応募を確認
5. 承認/却下を選択
6. 承認の場合、メッセージング開始

### 3.4.3 メッセージングフロー
1. 応募承認後、自動的に会話作成
2. 双方向でメッセージ送信可能
3. リアルタイムで相手に通知
4. 既読状態の自動更新

## 4. セキュリティとプライバシー

### 4.1 実装済みセキュリティ機能
- Supabase RLSによるデータアクセス制御
- サーバーサイド認証フロー
- HTTPSによる通信暗号化
- XSS対策（React/Next.jsのデフォルト機能）

### 4.2 プライバシー保護
- 個人情報の適切な管理
- プロフィール公開/非公開設定
- メッセージの参加者以外からのアクセス防止
- ソフトデリートによるデータ保護

## 5. 開発・運用体制

### 5.1 開発環境
- ローカル開発：Node.js、npm/yarn
- バージョン管理：Git/GitHub
- CI/CD：GitHub Actions + Vercel

### 5.2 テスト
- 単体テスト（今後実装）
- 統合テスト（今後実装）
- E2Eテスト（今後実装）
- 手動テスト（実施中）

### 5.3 モニタリング
- Vercel Analytics（パフォーマンス監視）
- Supabase Dashboard（データベース監視）
- エラー監視（今後実装）

## 6. 今後の拡張計画

### 6.1 短期（1-3ヶ月）
- 検索機能の強化
- 通知システムの実装
- プロジェクト管理機能の改善
- モバイルUI/UXの最適化

### 6.2 中期（3-6ヶ月）
- 評価・レビューシステム
- ファイルアップロード機能
- 詳細なアナリティクス
- 多言語対応（英語）

### 6.3 長期（6ヶ月以降）
- AI機能の実装
- 有料プランの導入
- コミュニティ機能
- モバイルアプリ開発

## 7. 成功指標（KPI）

### 7.1 ユーザー関連
- 新規ユーザー登録数（月間）
- アクティブユーザー率（MAU/総登録数）
- ユーザー継続率（3ヶ月後）

### 7.2 マッチング関連
- プロジェクト登録数（月間）
- 応募数（月間）
- マッチング成立数（承認された応募）
- マッチング成功率（承認率）

### 7.3 エンゲージメント
- 平均セッション時間
- メッセージ送信数
- リピート訪問率

## 8. リスクと対策

### 8.1 技術的リスク
- **スケーラビリティ**: Supabaseの制限
  → 必要に応じてプラン変更、最適化実施

- **パフォーマンス低下**: データ量増加
  → インデックス最適化、キャッシュ戦略

### 8.2 ビジネスリスク
- **ユーザー獲得**: 初期ユーザーの確保
  → マーケティング戦略、紹介制度

- **品質管理**: 不適切なユーザー・コンテンツ
  → レポート機能、モデレーション（今後実装）

### 8.3 セキュリティリスク
- **データ漏洩**: 個人情報の保護
  → RLSの徹底、定期的な監査

- **不正アクセス**: アカウント乗っ取り
  → 2要素認証の実装（今後）

## 9. 結論

本プラットフォームは、クライアントとPMの効率的なマッチングを実現するために、段階的な開発アプローチを採用している。現在、基本的な機能の実装が完了し、ユーザーは登録からプロジェクト作成、応募、メッセージングまでの一連のフローを利用できる。

今後は、ユーザーフィードバックを基に機能改善を行いながら、より高度な機能を追加していく予定である。セキュリティとユーザビリティを重視し、持続可能なプラットフォームの構築を目指す。